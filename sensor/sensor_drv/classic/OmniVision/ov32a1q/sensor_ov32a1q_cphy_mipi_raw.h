/*
 * Copyright (C) 2012 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * V1.0
 */
/*History
*Date                  Modification                                 Reason
*
*/

#ifndef _SENSOR_ov32a1q_MIPI_RAW_H_
#define _SENSOR_ov32a1q_MIPI_RAW_H_

#include <utils/Log.h>
#include "sensor.h"
#include "jpeg_exif_header.h"
#include "sensor_drv_u.h"
#include "sensor_raw.h"

#include "parameters/parameters_sharkl5/sensor_ov32a1q_raw_param_main.c"

//#define FEATURE_OTP

#define VENDOR_NUM 1
#define SENSOR_NAME "ov32a1q_mipi_raw"

#define I2C_SLAVE_ADDR 0x20 /* 8bit slave address*/

#define ov32a1q_PID_ADDR 0x300B
#define ov32a1q_PID_VALUE 0x32
#define ov32a1q_VER_ADDR 0x300C
#define ov32a1q_VER_VALUE 0x41

/* sensor parameters begin */

/* effective sensor output image size */
#define VIDEO_WIDTH 1920
#define VIDEO_HEIGHT 1080
#define PREVIEW_WIDTH 3264
#define PREVIEW_HEIGHT 2448
#define SNAPSHOT_WIDTH 3264//6528
#define SNAPSHOT_HEIGHT 2448//4896

/*Raw Trim parameters*/
#define VIDEO_TRIM_X 0
#define VIDEO_TRIM_Y 0
#define VIDEO_TRIM_W 1920
#define VIDEO_TRIM_H 1080
#define PREVIEW_TRIM_X 0
#define PREVIEW_TRIM_Y 0
#define PREVIEW_TRIM_W 3264
#define PREVIEW_TRIM_H 2448
#define SNAPSHOT_TRIM_X 0
#define SNAPSHOT_TRIM_Y 0
#define SNAPSHOT_TRIM_W 6528
#define SNAPSHOT_TRIM_H 4896

/*Mipi output*/
#define LANE_NUM 3
#define RAW_BITS 10

#define VIDEO_MIPI_PER_LANE_BPS 1800    /* 2*Mipi clk */
#define PREVIEW_MIPI_PER_LANE_BPS 1200 //2400   /* 2*Mipi clk */
#define SNAPSHOT_MIPI_PER_LANE_BPS 1512 /* 2*Mipi clk */

/*line time unit: 1ns*/
#define VIDEO_LINE_TIME 3670
#define PREVIEW_LINE_TIME 11667//9330
#define SNAPSHOT_LINE_TIME  13330

/* frame length*/
#define VIDEO_FRAME_LENGTH 0x8e0
#define PREVIEW_FRAME_LENGTH 0x1388 //0xdf2
#define SNAPSHOT_FRAME_LENGTH 0x1388

/* please ref your spec */
#define FRAME_OFFSET 14
#define SENSOR_MAX_GAIN 0x0F00
#define SENSOR_BASE_GAIN 0x0100
#define SENSOR_MIN_SHUTTER 8

/* please ref your spec
 * 1 : average binning
 * 2 : sum-average binning
 * 4 : sum binning
 */
#define BINNING_FACTOR 1

/* please ref spec
 * 1: sensor auto caculate
 * 0: driver caculate
 */
/* sensor parameters end */

/* isp parameters, please don't change it*/
#define ISP_BASE_GAIN 0x80

/* please don't change it */
#define EX_MCLK 24

static const SENSOR_REG_T ov32a1q_init_setting[] = {
//	@@ initial setting
	
	{0x0103, 0x01},
	{0x0302, 0x31},
	{0x0323, 0x05},
	{0x0324, 0x01},
	{0x0325, 0x68},
	{0x0326, 0xcb},
	{0x0327, 0x05},
	{0x0343, 0x05},
	{0x0346, 0xcf},
	{0x300e, 0x22},
	{0x3016, 0x96},
	{0x3017, 0x78},
	{0x3018, 0x70},
	{0x3019, 0xd2},
	{0x301b, 0x16},
	{0x3022, 0xd0},
	{0x3028, 0xc3},
	{0x3102, 0x00},
	{0x3103, 0x0a},
	{0x3221, 0x0a},
	{0x3400, 0x04},
	{0x3408, 0x06},
	{0x3508, 0x08},
	{0x3548, 0x08},
	{0x360b, 0xfc},
	{0x360c, 0x11},
	{0x3619, 0x80},
	{0x361c, 0x80},
	{0x361e, 0x87},
	{0x3623, 0x55},
	{0x3626, 0x89},
	{0x3627, 0x11},
	{0x3628, 0x88},
	{0x3629, 0xce},
	{0x3634, 0x0c},
	{0x363b, 0x09},
	{0x363c, 0x14},
	{0x363d, 0x24},
	{0x363e, 0x43},
	{0x3641, 0x0a},
	{0x3642, 0xc8},
	{0x3654, 0x0a},
	{0x3655, 0xdc},
	{0x3656, 0x0f},
	{0x3663, 0x81},
	{0x3664, 0x00},
	{0x3681, 0x08},
	{0x3683, 0x11},
	{0x3684, 0x40},
	{0x3685, 0x10},
	{0x3686, 0x11},
	{0x368b, 0x06},
	{0x3704, 0x22},
	{0x3706, 0x4f},
	{0x3709, 0x8e},
	{0x3711, 0x00},
	{0x3724, 0x40},
	{0x373f, 0x02},
	{0x374f, 0x05},
	{0x3765, 0x08},
	{0x3767, 0x00},
	{0x37cb, 0x11},
	{0x37cc, 0x0f},
	{0x37d9, 0x08},
	{0x37dc, 0x20},
	{0x37e3, 0x18},
	{0x3823, 0x04},
	{0x382a, 0x01},
	{0x3834, 0x04},
	{0x383d, 0x00},
	{0x3860, 0x00},
	{0x3861, 0x00},
	{0x3889, 0x03},
	{0x388b, 0x02},
	{0x388d, 0x01},
	{0x3d85, 0x85},
	{0x3d8c, 0x77},
	{0x3d8d, 0xa0},
	{0x3d96, 0x0a},
	{0x3f01, 0x12},
	{0x4009, 0x02},
	{0x4021, 0x00},
	{0x4023, 0x00},
	{0x4024, 0x04},
	{0x4025, 0x00},
	{0x4026, 0x04},
	{0x4027, 0x00},
	{0x40c3, 0x0a},
	{0x4506, 0x0a},
	{0x460a, 0x0a},
	{0x464a, 0x0a},
	{0x4850, 0x41},
	{0x4a00, 0x10},
	{0x4d01, 0x00},
	{0x4d02, 0xb7},
	{0x4d03, 0xca},
	{0x4d04, 0x30},
	{0x4d05, 0x1d},
	{0x5181, 0x10},
	{0x5182, 0x05},
	{0x5183, 0x8f},
	{0x522a, 0x44},
	{0x522b, 0x44},
	{0x522c, 0x14},
	{0x522d, 0x44},
	{0x5300, 0x7b},
	{0x5311, 0x01},
	{0x5312, 0x01},
	{0x5313, 0x02},
	{0x5314, 0x04},
	{0x5315, 0x06},
	{0x5316, 0x08},
	{0x5317, 0x0a},
	{0x5318, 0x0c},
	{0x5319, 0x0e},
	{0x531a, 0x10},
	{0x531b, 0x12},
	{0x531c, 0x14},
	{0x531d, 0x16},
	{0x531e, 0x18},
	{0x5330, 0x12},
	{0x5331, 0x15},
	{0x5332, 0x17},
	{0x5333, 0x19},
	{0x5334, 0x1b},
	{0x5335, 0x1d},
	{0x5336, 0x1e},
	{0x5337, 0x1f},
	{0x5338, 0x20},
	{0x5339, 0x20},
	{0x533a, 0x0c},
	{0x533b, 0x02},
	{0x533c, 0x68},
	{0x5d80, 0x21},
	{0x5d82, 0x04},
	{0x5d85, 0x19},
	{0x5e07, 0x0a},
	{0x600b, 0x03}, 	 
	{0x0344, 0x01},
	{0x0345, 0xe0},
	{0x034a, 0x06},
	{0x034b, 0x00},
	{0x3501, 0x13},
	{0x3502, 0x64},
	{0x3603, 0x0b},
	{0x3608, 0x63},
	{0x360d, 0x61},
	{0x3622, 0x55},
	{0x3633, 0x03},
	{0x3635, 0x0c},
	{0x3636, 0x0c},
	{0x3639, 0xcc},
	{0x363a, 0xcc},
	{0x366b, 0x02},
	{0x370b, 0xb0},
	{0x3712, 0x00},
	{0x3714, 0x67},
	{0x3800, 0x00},
	{0x3801, 0x00},
	{0x3802, 0x00},
	{0x3803, 0x00},
	{0x3804, 0x19},
	{0x3805, 0x9f},
	{0x3806, 0x13},
	{0x3807, 0x3f},
	{0x3808, 0x19},
	{0x3809, 0x80},
	{0x380a, 0x13},
	{0x380b, 0x20},
	{0x380c, 0x02},
	{0x380d, 0xee},
	{0x380e, 0x13},
	{0x380f, 0x88},
	{0x3811, 0x12},
	{0x3813, 0x10},
	{0x3814, 0x11},
	{0x3815, 0x11},
	{0x3820, 0x00},
	{0x3821, 0x04},
	{0x3822, 0x00},
	{0x4012, 0x7d},
	{0x4015, 0x04},
	{0x4016, 0x1b},
	{0x4018, 0x07},
	{0x401e, 0x01},
	{0x401f, 0x0c},
	{0x4837, 0x06},
	{0x5000, 0x89},
	{0x5001, 0x02},
	{0x5002, 0x01},
	{0x5003, 0x7a},
	{0x5005, 0x00},
	{0x5014, 0x00},
	{0x5015, 0x06},
	{0x5035, 0x10},
	{0x5037, 0x10},
	{0x5038, 0x19},
	{0x5039, 0x80},
	{0x503a, 0x13},
	{0x503b, 0x20},
	{0x5185, 0x0c},
	{0x518c, 0x01},
	{0x518d, 0x01},
	{0x518e, 0x01},
	{0x518f, 0x01},
	{0x5207, 0xff},
	{0x5208, 0xc1},
	{0x5380, 0x0f},
	{0x5381, 0x00},
	{0x5386, 0x19},
	{0x5387, 0xa0},
	{0x5388, 0x13},
	{0x5389, 0x40},
	{0x5880, 0xc5},
	{0x5884, 0x18},
	{0x5885, 0x08},
	{0x5886, 0x08},
	{0x5887, 0x18},
	{0x5889, 0x05},
	{0x588a, 0x00},
	{0x58c0, 0x10},
	{0x58c2, 0x0e},
	{0x58c3, 0x0c},
	{0x58c4, 0x04},
	{0x58c5, 0x01},
	{0x58c6, 0xf7},
	{0x58c8, 0x6f},
	{0x58ca, 0x1d},
	{0x58cb, 0x01},
	{0x58cc, 0xfd},// ;CPHY
	{0x0301, 0x01},
	{0x0306, 0x03},
	{0x0360, 0x01},
	{0x3012, 0x31},
	{0x301e, 0x90},
	{0x3660, 0xc1},
	{0x4802, 0x02},
	{0x481b, 0x1f},
	{0x4833, 0x0c},
	{0x4837, 0x09},
	{0x4850, 0x40},
	{0x4860, 0x01},
	{0x4862, 0x3c},
	{0x4883, 0x24},
	{0x4888, 0x80}, //;low mipi datarate 768M
	{0x380c, 0x0b},
	{0x380d, 0xb8},
	{0x0305, 0x20},
	{0x4837, 0x12}, //;14;1X gain & exposure
	{0x3508, 0x01},
	{0x3509, 0x00},
	{0x3501, 0x00},
	{0x3502, 0x90},// ;XTalk key setting
	{0x3820, 0x00},
	{0x3821, 0x04},
	{0x5000, 0x09},
	{0x5001, 0x02},
	{0x5002, 0x01},
	{0x5004, 0x01}, //;XTalk step2 for 32A10
	{0x5500, 0x82},
	{0x5501, 0x89},
	{0x5502, 0x88},
	{0x5503, 0x8a},
	{0x5504, 0x76},
	{0x5505, 0x7c},
	{0x5506, 0x80},
	{0x5507, 0x8d},
	{0x5508, 0x74},
	{0x5509, 0x71},
	{0x550a, 0x77},
	{0x550b, 0x7c},
	{0x550c, 0x9e},
	{0x550d, 0x84},
	{0x550e, 0x88},
	{0x550f, 0x74},
	{0x5510, 0x77},
	{0x5511, 0x73},
	{0x5512, 0x9e},
	{0x5513, 0x9a},
	{0x5514, 0x8c},
	{0x5515, 0x89},
	{0x5516, 0x74},
	{0x5517, 0x72},
	{0x5518, 0x86},
	{0x5519, 0x8d},
	{0x551a, 0x75},
	{0x551b, 0x77},
	{0x551c, 0x71},
	{0x551d, 0x73},
	{0x551e, 0x83},
	{0x551f, 0x89},
	{0x5520, 0x73},
	{0x5521, 0x7c},
	{0x5522, 0x72},
	{0x5523, 0x71},
	{0x5524, 0x7c},
	{0x5525, 0x7c},
	{0x5526, 0x64},
	{0x5527, 0x7b},
	{0x5528, 0x70},
	{0x5529, 0x8f},
	{0x552a, 0x71},
	{0x552b, 0x70},
	{0x552c, 0x73},
	{0x552d, 0x76},
	{0x552e, 0x8a},
	{0x552f, 0x81},
	{0x5530, 0x7f},
	{0x5531, 0x72},
	{0x5532, 0x76},
	{0x5533, 0x8a},
	{0x5534, 0x8d},
	{0x5535, 0x87},
	{0x5536, 0x7e},
	{0x5537, 0x7f},
	{0x5538, 0x72},
	{0x5539, 0x71},
	{0x553a, 0x8c},
	{0x553b, 0x86},
	{0x553c, 0x7d},
	{0x553d, 0x71},
	{0x553e, 0x76},
	{0x553f, 0x74},
	{0x5540, 0x8f},
	{0x5541, 0x80},
	{0x5542, 0x7d},
	{0x5543, 0x77},
	{0x5544, 0x8b},
	{0x5545, 0x8e},
	{0x5546, 0x8c},
	{0x5547, 0x8e},
	{0x5548, 0x8f},
	{0x5549, 0x8f},
	{0x554a, 0x9e},
	{0x554b, 0x98},
	{0x554c, 0x80},
	{0x554d, 0x8e},
	{0x554e, 0x72},
	{0x554f, 0x70},
	{0x5550, 0x8d},
	{0x5551, 0x8c},
	{0x5552, 0x8b},
	{0x5553, 0x71},
	{0x5554, 0x7c},
	{0x5555, 0x7f},
	{0x5556, 0x75},
	{0x5557, 0x74},
	{0x5558, 0x70},
	{0x5559, 0x72},
	{0x555a, 0x72},
	{0x555b, 0x70},
	{0x555c, 0x8e},
	{0x555d, 0x8e},
	{0x555e, 0x77},
	{0x555f, 0x70},
	{0x5560, 0x77},
	{0x5561, 0x74},
	{0x5562, 0x8d},
	{0x5563, 0x8f},
	{0x5564, 0x8b},
	{0x5565, 0x77},
	{0x5566, 0x89},
	{0x5567, 0x8a},
	{0x5568, 0x8f},
	{0x5569, 0x89},
	{0x556a, 0x8b},
	{0x556b, 0x8a},
	{0x556c, 0x67},
	{0x556d, 0x7f},
	{0x556e, 0x76},
	{0x556f, 0x75},
	{0x5570, 0x88},
	{0x5571, 0x8a},
	{0x5572, 0x60},
	{0x5573, 0x7f},
	{0x5574, 0x70},
	{0x5575, 0x74},
	{0x5576, 0x8e},
	{0x5577, 0x8a},
	{0x5578, 0x68},
	{0x5579, 0x78},
	{0x557a, 0x71},
	{0x557b, 0x8b},
	{0x557c, 0x81},
	{0x557d, 0x82},
	{0x557e, 0x6c},
	{0x557f, 0x79},
	{0x5580, 0x8a},
	{0x5581, 0x8f},
	{0x5582, 0x87},
	{0x5583, 0x82},
	{0x5584, 0x63},
	{0x5585, 0x65},
	{0x5586, 0x73},
	{0x5587, 0x77},
	{0x5588, 0x8e},
	{0x5589, 0x8b},
	{0x558a, 0x6c},
	{0x558b, 0x61},
	{0x558c, 0x7b},
	{0x558d, 0x7e},
	{0x558e, 0x76},
	{0x558f, 0x71},
	{0x5590, 0x85},
	{0x5591, 0x8b},
	{0x5592, 0x78},
	{0x5593, 0x7a},
	{0x5594, 0x7d},
	{0x5595, 0x77},
	{0x5596, 0x93},
	{0x5597, 0x82},
	{0x5598, 0x76},
	{0x5599, 0x72},
	{0x559a, 0x70},
	{0x559b, 0x89},
	{0x559c, 0xae},
	{0x559d, 0x98},
	{0x559e, 0x88},
	{0x559f, 0x71},
	{0x55a0, 0x72},
	{0x55a1, 0x77},
	{0x55a2, 0x94},
	{0x55a3, 0x9a},
	{0x55a4, 0x76},
	{0x55a5, 0x7d},
	{0x55a6, 0x7f},
	{0x55a7, 0x70},
	{0x55a8, 0x93},
	{0x55a9, 0x9a},
	{0x55aa, 0x8a},
	{0x55ab, 0x71},
	{0x55ac, 0x70},
	{0x55ad, 0x74},
	{0x55ae, 0x90},
	{0x55af, 0x9e},
	{0x55b0, 0x82},
	{0x55b1, 0x8e},
	{0x55b2, 0x8b},
	{0x55b3, 0x88},
	{0x55b4, 0x70},
	{0x55b5, 0x8c},
	{0x55b6, 0x9b},
	{0x55b7, 0x99},
	{0x55b8, 0x8f},
	{0x55b9, 0x75},
	{0x55ba, 0x7b},
	{0x55bb, 0x77},
	{0x55bc, 0x8c},
	{0x55bd, 0x82},
	{0x55be, 0x76},
	{0x55bf, 0x7f},
	{0x55c0, 0x61},
	{0x55c1, 0x7c},
	{0x55c2, 0x75},
	{0x55c3, 0x8a},
	{0x55c4, 0x72},
	{0x55c5, 0x7c},
	{0x55c6, 0x7b},
	{0x55c7, 0x70},
	{0x55c8, 0x8f},
	{0x55c9, 0x8c},
	{0x55ca, 0x77},
	{0x55cb, 0x70},
	{0x55cc, 0x7c},
	{0x55cd, 0x77},
	{0x55ce, 0x8c},
	{0x55cf, 0x82},
	{0x55d0, 0x8b},
	{0x55d1, 0x77},
	{0x55d2, 0x7f},
	{0x55d3, 0x70},
	{0x55d4, 0x88},
	{0x55d5, 0x8f},
	{0x55d6, 0x8b},
	{0x55d7, 0x74},
	{0x55d8, 0x8c},
	{0x55d9, 0x83},
	{0x55da, 0x75},
	{0x55db, 0x74},
	{0x55dc, 0x88},
	{0x55dd, 0x75},
	{0x55de, 0x9a},
	{0x55df, 0x84},
	{0x55e0, 0x8e},
	{0x55e1, 0x88},
	{0x55e2, 0x8b},
	{0x55e3, 0x74},
	{0x55e4, 0x9d},
	{0x55e5, 0x9c},
	{0x55e6, 0x80},
	{0x55e7, 0x82},
	{0x55e8, 0x88},
	{0x55e9, 0x76},
	{0x55ea, 0x9c},
	{0x55eb, 0x9b},
	{0x55ec, 0x8e},
	{0x55ed, 0x75},
	{0x55ee, 0x75},
	{0x55ef, 0x73},
	{0x55f0, 0x83},
	{0x55f1, 0x8f},
	{0x55f2, 0x72},
	{0x55f3, 0x7e},
	{0x55f4, 0x70},
	{0x55f5, 0x72},
	{0x55f6, 0x8e},
	{0x55f7, 0x75},
	{0x55f8, 0x72},
	{0x55f9, 0x7c},
	{0x55fa, 0x73},
	{0x55fb, 0x73},
	{0x55fc, 0x74},
	{0x55fd, 0x73},
	{0x55fe, 0x74},
	{0x55ff, 0x75},
	{0x5600, 0x74},
	{0x5601, 0x88},
	{0x5602, 0x7c},
	{0x5603, 0x7e},
	{0x5604, 0x73},
	{0x5605, 0x76},
	{0x5606, 0x8b},
	{0x5607, 0x8f},
	{0x5608, 0x7a},
	{0x5609, 0x7a},
	{0x560a, 0x7f},
	{0x560b, 0x72},
	{0x560c, 0x8b},
	{0x560d, 0x83},
	{0x560e, 0x7e},
	{0x560f, 0x7e},
	{0x5610, 0x72},
	{0x5611, 0x77},
	{0x5612, 0x89},
	{0x5613, 0x86},
	{0x5614, 0x71},
	{0x5615, 0x70},
	{0x5616, 0x72},
	{0x5617, 0x76},
	{0x5618, 0x75},
	{0x5619, 0x82},
	{0x561a, 0x71},
	{0x561b, 0x72},
	{0x561c, 0x7a},
	{0x561d, 0x7b},
	{0x561e, 0x7d},
	{0x561f, 0x8a},
	{0x5620, 0x7d},
	{0x5621, 0x74},
	{0x5622, 0x89},
	{0x5623, 0x8b},
	{0x5624, 0x75},
	{0x5625, 0x76},
	{0x5626, 0x72},
	{0x5627, 0x77},
	{0x5628, 0x8f},
	{0x5629, 0x89},
	{0x562a, 0x74},
	{0x562b, 0x71},
	{0x562c, 0x7d},
	{0x562d, 0x70},
	{0x562e, 0x89},
	{0x562f, 0x89},
	{0x5630, 0x77},
	{0x5631, 0x72},
	{0x5632, 0x7e},
	{0x5633, 0x72},
	{0x5634, 0x8b},
	{0x5635, 0x8b},
	{0x5636, 0x76},
	{0x5637, 0x7c},
	{0x5638, 0x7f},
	{0x5639, 0x77},
	{0x563a, 0x86},
	{0x563b, 0x86},
	{0x563c, 0x8e},
	{0x563d, 0x76},
	{0x563e, 0x76},
	{0x563f, 0x8d},
	{0x5640, 0x93},
	{0x5641, 0x93},
	{0x5642, 0x85},
	{0x5643, 0x8e},
	{0x5644, 0x62},
	{0x5645, 0x78},
	{0x5646, 0x7f},
	{0x5647, 0x7c},
	{0x5648, 0x74},
	{0x5649, 0x77},
	{0x564a, 0x63},
	{0x564b, 0x79},
	{0x564c, 0x71},
	{0x564d, 0x74},
	{0x564e, 0x8f},
	{0x564f, 0x88},
	{0x5650, 0x6c},
	{0x5651, 0x7f},
	{0x5652, 0x88},
	{0x5653, 0x8d},
	{0x5654, 0x85},
	{0x5655, 0x80},
	{0x5656, 0x6a},
	{0x5657, 0x7a},
	{0x5658, 0x72},
	{0x5659, 0x77},
	{0x565a, 0x81},
	{0x565b, 0x8f},
	{0x565c, 0x68},
	{0x565d, 0x64},
	{0x565e, 0x65},
	{0x565f, 0x79},
	{0x5660, 0x77},
	{0x5661, 0x70},
	{0x5662, 0x54},
	{0x5663, 0x66},
	{0x5664, 0x78},
	{0x5665, 0x7f},
	{0x5666, 0x7d},
	{0x5667, 0x7e},
	{0x5668, 0x90},
	{0x5669, 0x84},
	{0x566a, 0x8d},
	{0x566b, 0x8f},
	{0x566c, 0x75},
	{0x566d, 0x8b},
	{0x566e, 0x90},
	{0x566f, 0x85},
	{0x5670, 0x8a},
	{0x5671, 0x76},
	{0x5672, 0x70},
	{0x5673, 0x74},
	{0x5674, 0x94},
	{0x5675, 0x87},
	{0x5676, 0x71},
	{0x5677, 0x7f},
	{0x5678, 0x79},
	{0x5679, 0x72},
	{0x567a, 0xac},
	{0x567b, 0x98},
	{0x567c, 0x88},
	{0x567d, 0x76},
	{0x567e, 0x72},
	{0x567f, 0x75},
	{0x5680, 0x94},
	{0x5681, 0x80},
	{0x5682, 0x75},
	{0x5683, 0x76},
	{0x5684, 0x74},
	{0x5685, 0x8d},
	{0x5686, 0x91},
	{0x5687, 0x89},
	{0x5688, 0x7e},
	{0x5689, 0x78},
	{0x568a, 0x71},
	{0x568b, 0x8c},
	{0x568c, 0x64},
	{0x568d, 0x73},
	{0x568e, 0x75},
	{0x568f, 0x8b},
	{0x5690, 0x75},
	{0x5691, 0x73},
	{0x5692, 0x7a},
	{0x5693, 0x70},
	{0x5694, 0x89},
	{0x5695, 0x8f},
	{0x5696, 0x74},
	{0x5697, 0x73},
	{0x5698, 0x67},
	{0x5699, 0x73},
	{0x569a, 0x8e},
	{0x569b, 0x8f},
	{0x569c, 0x76},
	{0x569d, 0x72},
	{0x569e, 0x62},
	{0x569f, 0x7c},
	{0x56a0, 0x8a},
	{0x56a1, 0x8b},
	{0x56a2, 0x72},
	{0x56a3, 0x79},
	{0x56a4, 0x65},
	{0x56a5, 0x8a},
	{0x56a6, 0x81},
	{0x56a7, 0x86},
	{0x56a8, 0x74},
	{0x56a9, 0x7e},
	{0x56aa, 0x7e},
	{0x56ab, 0x81},
	{0x56ac, 0x93},
	{0x56ad, 0x90},
	{0x56ae, 0x83},
	{0x56af, 0x76},
	{0x56b0, 0x98},
	{0x56b1, 0x82},
	{0x56b2, 0x86},
	{0x56b3, 0x9c},
	{0x56b4, 0x98},
	{0x56b5, 0x85},
	{0x56b6, 0x85},
	{0x56b7, 0x8e},
	{0x56b8, 0x8d},
	{0x56b9, 0x9a},
	{0x56ba, 0x84},
	{0x56bb, 0x81},
	{0x56bc, 0x84},
	{0x56bd, 0x76},
	{0x56be, 0x73},
	{0x56bf, 0x8e},
	{0x56c0, 0x8c},
	{0x56c1, 0x8a},
	{0x56c2, 0x81},
	{0x56c3, 0x70},
	{0x56c4, 0x7b},
	{0x56c5, 0x74},
	{0x56c6, 0x77},
	{0x56c7, 0x76},
	{0x56c8, 0x88},
	{0x56c9, 0x72},
	{0x56ca, 0x78},
	{0x56cb, 0x76},
	{0x56cc, 0x71},
	{0x56cd, 0x74},
	{0x56ce, 0x8a},
	{0x56cf, 0x7c},
	{0x56d0, 0x7b},
	{0x56d1, 0x71},
	{0x56d2, 0x8a},
	{0x56d3, 0x8a},
	{0x56d4, 0x6d},
	{0x56d5, 0x7d},
	{0x56d6, 0x76},
	{0x56d7, 0x78},
	{0x56d8, 0x78},
	{0x56d9, 0x7e},
	{0x56da, 0x6f},
	{0x56db, 0x7f},
	{0x56dc, 0x77},
	{0x56dd, 0x7c},
	{0x56de, 0x79},
	{0x56df, 0x7f},
	{0x56e0, 0x6b},
	{0x56e1, 0x7f},
	{0x56e2, 0x8f},
	{0x56e3, 0x77},
	{0x56e4, 0x70},
	{0x56e5, 0x75},
	{0x56e6, 0x68},
	{0x56e7, 0x7d},
	{0x56e8, 0x84},
	{0x56e9, 0x89},
	{0x56ea, 0x89},
	{0x56eb, 0x89},
	{0x56ec, 0x64},
	{0x56ed, 0x77},
	{0x56ee, 0x98},
	{0x56ef, 0x80},
	{0x56f0, 0x8d},
	{0x56f1, 0x89},
	{0x56f2, 0x7f},
	{0x56f3, 0x8f},
	{0x56f4, 0x9d},
	{0x56f5, 0x85},
	{0x56f6, 0x8c},
	{0x56f7, 0x8e},
	{0x56f8, 0x9b},
	{0x56f9, 0x75},
	{0x56fa, 0x78},
	{0x56fb, 0x7c},
	{0x56fc, 0x76},
	{0x56fd, 0x75},
	{0x56fe, 0x9c},
	{0x56ff, 0x8c},
	{0x5700, 0x7c},
	{0x5701, 0x70},
	{0x5702, 0x8b},
	{0x5703, 0x88},
	{0x5704, 0x91},
	{0x5705, 0x87},
	{0x5706, 0x71},
	{0x5707, 0x74},
	{0x5708, 0x89},
	{0x5709, 0x8a},
	{0x570a, 0x97},
	{0x570b, 0x85},
	{0x570c, 0x73},
	{0x570d, 0x77},
	{0x570e, 0x75},
	{0x570f, 0x74},
	{0x5710, 0x9d},
	{0x5711, 0x80},
	{0x5712, 0x7e},
	{0x5713, 0x72},
	{0x5714, 0x71},
	{0x5715, 0x77},
	{0x5716, 0x9b},
	{0x5717, 0x88},
	{0x5718, 0x65},
	{0x5719, 0x79},
	{0x571a, 0x73},
	{0x571b, 0x71},
	{0x571c, 0x9b},
	{0x571d, 0x9a},
	{0x571e, 0x99},
	{0x571f, 0x81},
	{0x5720, 0x8b},
	{0x5721, 0x88},
	{0x5722, 0x88},
	{0x5723, 0x82},
	{0x5724, 0x85},
	{0x5725, 0x8f},
	{0x5726, 0x70},
	{0x5727, 0x75},
	{0x5728, 0x7c},
	{0x5729, 0x76},
	{0x572a, 0x88},
	{0x572b, 0x7c},
	{0x572c, 0x64},
	{0x572d, 0x70},
	{0x572e, 0x78},
	{0x572f, 0x7c},
	{0x5730, 0x77},
	{0x5731, 0x65},
	{0x5732, 0x62},
	{0x5733, 0x73},
	{0x5734, 0x7e},
	{0x5735, 0x7c},
	{0x5736, 0x73},
	{0x5737, 0x7a},
	{0x5738, 0x66},
	{0x5739, 0x7f},
	{0x573a, 0x73},
	{0x573b, 0x73},
	{0x573c, 0x7d},
	{0x573d, 0x7a},
	{0x573e, 0x64},
	{0x573f, 0x7b},
	{0x5740, 0x67},
	{0x5741, 0x78},
	{0x5742, 0x78},
	{0x5743, 0x71},
	{0x5744, 0x77},
	{0x5745, 0x7d},
	{0x5746, 0x73},
	{0x5747, 0x7d},
	{0x5748, 0x7f},
	{0x5749, 0x77},
	{0x574a, 0x75},
	{0x574b, 0x7c},
	{0x574c, 0x8e},
	{0x574d, 0x8a},
	{0x574e, 0x77},
	{0x574f, 0x8f},
	{0x5750, 0x88},
	{0x5751, 0x7f},
	{0x5752, 0x82},
	{0x5753, 0x8d},
	{0x5754, 0x88},
	{0x5755, 0x87},
	{0x5756, 0x82},
	{0x5757, 0x7f},
	{0x5758, 0x82},
	{0x5759, 0x80},
	{0x575a, 0x83},
	{0x575b, 0x98},
	{0x575c, 0x81},
	{0x575d, 0x77},
	{0x575e, 0x8f},
	{0x575f, 0x82},
	{0x5760, 0x85},
	{0x5761, 0x9d},
	{0x5762, 0x9a},
	{0x5763, 0x82},
	{0x5764, 0x8c},
	{0x5765, 0x77},
	{0x5766, 0x72},
	{0x5767, 0x7e},
	{0x5768, 0x76},
	{0x5769, 0x8d},
	{0x576a, 0x8f},
	{0x576b, 0x8a},
	{0x576c, 0x76},
	{0x576d, 0x72},
	{0x576e, 0x8b},
	{0x576f, 0x87},
	{0x5770, 0x89},
	{0x5771, 0x88},
	{0x5772, 0x8a},
	{0x5773, 0x76},
	{0x5774, 0x82},
	{0x5775, 0x98},
	{0x5776, 0x8a},
	{0x5777, 0x75},
	{0x5778, 0x75},
	{0x5779, 0x71},
	{0x577a, 0x8d},
	{0x577b, 0x99},
	{0x577c, 0x8a},
	{0x577d, 0x76},
	{0x577e, 0x70},
	{0x577f, 0x7c},
	{0x5780, 0x8b},
	{0x5781, 0x84},
	{0x5782, 0x8a},
	{0x5783, 0x76},
	{0x5784, 0x7f},
	{0x5785, 0x7b},
	{0x5786, 0x71},
	{0x5787, 0x8e},
	{0x5788, 0x77},
	{0x5789, 0x7c},
	{0x578a, 0x64},
	{0x578b, 0x7c},
	{0x578c, 0x76},
	{0x578d, 0x8f},
	{0x578e, 0x8e},
	{0x578f, 0x7c},
	{0x5790, 0x7b},
	{0x5791, 0x72},
	{0x5792, 0x77},
	{0x5793, 0x8b},
	{0x5794, 0x87},
	{0x5795, 0x76},
	{0x5796, 0x7f},
	{0x5797, 0x74},
	{0x5798, 0x75},
	{0x5799, 0x77},
	{0x579a, 0x9b},
	{0x579b, 0x8b},
	{0x579c, 0x75},
	{0x579d, 0x82},
	{0x579e, 0x82},
	{0x579f, 0x89},
	{0x57a0, 0x9d},
	{0x57a1, 0x87},
	{0x57a2, 0x9b},
	{0x57a3, 0x90},
	{0x57a4, 0x9c},
	{0x57a5, 0x9a},
	{0x57a6, 0x9c},
	{0x57a7, 0x99},
	{0x57a8, 0x93},
	{0x57a9, 0x95},
	{0x57aa, 0x91},
	{0x57ab, 0x90},
	{0x57ac, 0x71},
	{0x57ad, 0x8c},
	{0x57ae, 0x93},
	{0x57af, 0x9b},
	{0x57b0, 0x80},
	{0x57b1, 0x75},
	{0x57b2, 0x65},
	{0x57b3, 0x8a},
	{0x57b4, 0x98},
	{0x57b5, 0x86},
	{0x57b6, 0x8c},
	{0x57b7, 0x88},
	{0x57b8, 0x69},
	{0x57b9, 0x7d},
	{0x57ba, 0x80},
	{0x57bb, 0x8e},
	{0x57bc, 0x88},
	{0x57bd, 0x8e},
	{0x57be, 0x6a},
	{0x57bf, 0x7e},
	{0x57c0, 0x89},
	{0x57c1, 0x76},
	{0x57c2, 0x70},
	{0x57c3, 0x75},
	{0x57c4, 0x68},
	{0x57c5, 0x78},
	{0x57c6, 0x71},
	{0x57c7, 0x79},
	{0x57c8, 0x7b},
	{0x57c9, 0x7e},
	{0x57ca, 0x63},
	{0x57cb, 0x79},
	{0x57cc, 0x72},
	{0x57cd, 0x78},
	{0x57ce, 0x65},
	{0x57cf, 0x67},
	{0x57d0, 0x82},
	{0x57d1, 0x8a},
	{0x57d2, 0x7a},
	{0x57d3, 0x7e},
	{0x57d4, 0x72},
	{0x57d5, 0x73},
	{0x57d6, 0x9b},
	{0x57d7, 0x8d},
	{0x57d8, 0x7f},
	{0x57d9, 0x72},
	{0x57da, 0x71},
	{0x57db, 0x73},
	{0x57dc, 0x93},
	{0x57dd, 0x87},
	{0x57de, 0x73},
	{0x57df, 0x71},
	{0x57e0, 0x77},
	{0x57e1, 0x73},
	{0x57e2, 0x9c},
	{0x57e3, 0x80},
	{0x57e4, 0x72},
	{0x57e5, 0x71},
	{0x57e6, 0x75},
	{0x57e7, 0x71},
	{0x57e8, 0x84},
	{0x57e9, 0x75},
	{0x57ea, 0x65},
	{0x57eb, 0x79},
	{0x57ec, 0x71},
	{0x57ed, 0x76},
	{0x57ee, 0x8e},
	{0x57ef, 0x7d},
	{0x57f0, 0x63},
	{0x57f1, 0x67},
	{0x57f2, 0x7f},
	{0x57f3, 0x71},
	{0x57f4, 0x7f},
	{0x57f5, 0x72},
	{0x57f6, 0x72},
	{0x57f7, 0x64},
	{0x57f8, 0x66},
	{0x57f9, 0x7a},
	{0x57fa, 0x7c},
	{0x57fb, 0x72},
	{0x57fc, 0x71},
	{0x57fd, 0x78},
	{0x57fe, 0x66},
	{0x57ff, 0x72},
	{0x5800, 0x7e},
	{0x5801, 0x73},
	{0x5802, 0x8a},
	{0x5803, 0x79},
	{0x5804, 0x61},
	{0x5805, 0x70},
	{0x5806, 0x70},
	{0x5807, 0x8e},
	{0x5808, 0x80},
	{0x5809, 0x74},
	{0x580a, 0x7c},
	{0x580b, 0x8a},
	{0x580c, 0x81},
	{0x580d, 0x9e},
	{0x580e, 0x91},
	{0x580f, 0x98},
	{0x5810, 0x8f},
	{0x5811, 0x81},
	{0x5812, 0x9d},
	{0x5813, 0x96},
	{0x5814, 0xa8},
	{0x5815, 0x93},
	{0x5816, 0x83},
	{0x5817, 0x81},
	{0x5818, 0x81},
	{0x5819, 0x81},
	{0x581a, 0x87},
	{0x581b, 0x9c},
	{0x581c, 0x9b},
	{0x581d, 0x8d},
	{0x581e, 0x82},
	{0x581f, 0x8d},
	{0x5820, 0x8c},
	{0x5821, 0x84},
	{0x5822, 0x80},
	{0x5823, 0x70},
	{0x5824, 0x83},
	{0x5825, 0x8e},
	{0x5826, 0x75},
	{0x5827, 0x83},
	{0x5828, 0x8c},
	{0x5829, 0x7c},
	{0x582a, 0x89},
	{0x582b, 0x71},
	{0x582c, 0x72},
	{0x582d, 0x8b},
	{0x582e, 0x77},
	{0x582f, 0x7b},
	{0x5830, 0x7d},
	{0x5831, 0x7b},
	{0x5832, 0x65},
	{0x5833, 0x72},
	{0x5834, 0x73},
	{0x5835, 0x64},
	{0x5836, 0x67},
	{0x5837, 0x66},
	{0x5838, 0x66},
	{0x5839, 0x7f},
	{0x583a, 0x71},
	{0x583b, 0x79},
	{0x583c, 0x7f},
	{0x583d, 0x73},
	{0x583e, 0x72},
	{0x583f, 0x79},
	{0x5840, 0x71},
	{0x5841, 0x8b},
	{0x5842, 0x71},
	{0x5843, 0x77},
	{0x5844, 0x77},
	{0x5845, 0x73},
	{0x5846, 0x88},
	{0x5847, 0x86},
	{0x5848, 0x76},
	{0x5849, 0x77},
	{0x584a, 0x75},
	{0x584b, 0x71},
	{0x584c, 0x8c},
	{0x584d, 0x85},
	{0x584e, 0x74},
	{0x584f, 0x75},
	{0x5850, 0x77},
	{0x5851, 0x70},
	{0x5852, 0x8c},
	{0x5853, 0x85},
	{0x5854, 0x76},
	{0x5855, 0x71},
	{0x5856, 0x7c},
	{0x5857, 0x78},
	{0x5858, 0x77},
	{0x5859, 0x83},
	{0x585a, 0x76},
	{0x585b, 0x7d},
	{0x585c, 0x7b},
	{0x585d, 0x67},
	{0x585e, 0x7e},
	{0x585f, 0x8a},  
	//{0x0100, 0x01},  
};

static const SENSOR_REG_T ov32a1q_preview_setting[] = {
//	@@ binning size 3264x2448 20fps 792Mbps/trio
	{0x0100, 0x00},
	{0x3501, 0x0d},
	{0x3502, 0xce},
	{0x3608, 0x4a},
	{0x360d, 0x4a},
	{0x3622, 0x66},
	{0x3633, 0x06},
	{0x3635, 0x2c},
	{0x3636, 0x2c},
	{0x3639, 0x44},
	{0x363a, 0x33},
	{0x366b, 0x00},
	{0x3714, 0x61},
	{0x3808, 0x0c},
	{0x3809, 0xc0},
	{0x380a, 0x09},
	{0x380b, 0x90},
	{0x380c, 0x04},
	{0x380d, 0xec},
	{0x380e, 0x0d},
	{0x380f, 0xf2},
	{0x3811, 0x09},
	{0x3813, 0x08},
	{0x3814, 0x22},
	{0x3815, 0x22},
	{0x3820, 0x01},
	{0x3821, 0x0d},
	{0x4012, 0x0d},
	{0x4015, 0x02},
	{0x4016, 0x0d},
	{0x4018, 0x03},
	{0x5005, 0x08},
	{0x5014, 0x30},
	{0x5035, 0x08},
	{0x5037, 0x08},
	{0x5038, 0x0c},
	{0x5039, 0xc0},
	{0x503a, 0x09},
	{0x503b, 0x90},
	{0x5185, 0x0b},
	{0x5380, 0x0c},
	{0x5381, 0x06},
	{0x5386, 0x14},
	{0x5387, 0x60},
	{0x5388, 0x0f},
	{0x5389, 0xc8},
	{0x0305, 0x21},
	{0x4837, 0x11},
	//{0x0100, 0x01},

#if 0
//{0x0100,0x01},
#ifdef IMAGE_NORMAL_MIRROR
    {0x3820, 0x00}, // 44
    {0x3674, 0x00}, // 04
    {0x3675, 0x16}, //
    {0x3727, 0x23}, //
    {0x3891, 0x0f}, //
    {0x4500, 0x25}, //
    {0x450f, 0x88}, //
    {0x5194, 0x00}, //
    {0x5195, 0x00}, //
    {0x5404, 0x00}, //
    {0x5405, 0x00}, //
#endif
#ifdef IMAGE_H_MIRROR
    {0x3820, 0x00}, // 44
    {0x3674, 0x04}, // 04
    {0x3675, 0x16}, //
    {0x3727, 0x23}, //
    {0x3891, 0x0f}, //
    {0x4500, 0x25}, //
    {0x450f, 0x88}, //
    {0x5194, 0x00}, //
    {0x5195, 0x00}, //
    {0x5404, 0x00}, //
    {0x5405, 0x00}, //
#endif
#ifdef IMAGE_V_MIRROR
    {0x3820, 0x44}, // 44
    {0x3674, 0x00}, // 04
    {0x3675, 0x03}, //
    {0x3727, 0x27}, //
    {0x3891, 0x4f}, //
    {0x4500, 0x25}, //
    {0x450f, 0x88}, //
    {0x5194, 0x06}, //
    {0x5195, 0xe7}, //
    {0x5404, 0x06}, //
    {0x5405, 0xe7}, //
#endif
#ifdef IMAGE_HV_MIRROR
    {0x3820, 0x44}, // 44
    {0x3674, 0x04}, // 04
    {0x3675, 0x03}, //
    {0x3727, 0x27}, //
    {0x3891, 0x4f}, //
    {0x4500, 0x25}, //
    {0x450f, 0x88}, //
    {0x5194, 0x06}, //
    {0x5195, 0xe7}, //
    {0x5404, 0x06}, //
    {0x5405, 0xe7}, //
#endif
#endif

};

static const SENSOR_REG_T ov32a1q_snapshot_setting[] = {	
//	@@ full size 6528x4896 6fps mipi 768Mbps/trio
	{0x0100, 0x00},
	{0x3501, 0x13},
	{0x3502, 0x64},
	{0x3608, 0x63},
	{0x360d, 0x61},
	{0x3622, 0x55},
	{0x3633, 0x03},
	{0x3635, 0x0c},
	{0x3636, 0x0c},
	{0x3639, 0xcc},
	{0x363a, 0xcc},
	{0x366b, 0x02},
	{0x3714, 0x67},
	{0x3808, 0x19},
	{0x3809, 0x80},
	{0x380a, 0x13},
	{0x380b, 0x20},
	{0x380c, 0x0b},
	{0x380d, 0xb8},
	{0x380e, 0x13},
	{0x380f, 0x88},
	{0x3811, 0x12},
	{0x3813, 0x10},
	{0x3814, 0x11},
	{0x3815, 0x11},
	{0x3820, 0x00},
	{0x3821, 0x04},
	{0x4012, 0x7d},
	{0x4015, 0x04},
	{0x4016, 0x1b},
	{0x4018, 0x07},
	{0x5005, 0x00},
	{0x5014, 0x00},
	{0x5035, 0x10},
	{0x5037, 0x10},
	{0x5038, 0x19},
	{0x5039, 0x80},
	{0x503a, 0x13},
	{0x503b, 0x20},
	{0x5185, 0x0c},
	{0x5380, 0x0f},
	{0x5381, 0x00},
	{0x5386, 0x19},
	{0x5387, 0xa0},
	{0x5388, 0x13},
	{0x5389, 0x40},
	{0x380c, 0x0b},
	{0x380d, 0xb8},
	{0x0305, 0x20},
	{0x4837, 0x12},
	//{0x0100, 0x01},
};

static const SENSOR_REG_T ov32a1q_video_setting[] = {
/*"mclk = 24MHz
mipi_clk = 900MHz (1800Mbps/lane)
resolution = 1920*1080W*H
fps = 120
line_time = 3.67us
min_line = 8 lines
ob_value = 64
base_gain = 1x
ob_value @ max_gain  =  64 @ 15.5x
bayer pattern = BGGR "	
1080p 120fps	
register	value*/
//{0x0103, 0x01},
{0x0305, 0x4b},
{0x0343, 0x05},
{0x0344, 0x02},
{0x0345, 0x00},
{0x034a, 0x03},
{0x034b, 0x02},
{0x3408, 0x06},
{0x3501, 0x04},
{0x3502, 0x4c},
{0x3508, 0x08},
{0x3603, 0x0b},
{0x3608, 0x4a},
{0x360d, 0x4a},
{0x3622, 0x66},
{0x3629, 0xcf},
{0x3633, 0x06},
{0x3635, 0x2c},
{0x3636, 0x2c},
{0x3639, 0x44},
{0x363a, 0x33},
{0x3664, 0x00},
{0x366b, 0x00},
{0x370b, 0xaa},
{0x3711, 0x00},
{0x3712, 0x00},
{0x3713, 0x01},
{0x3714, 0x61},
{0x3800, 0x05},
{0x3801, 0x40},
{0x3802, 0x05},
{0x3803, 0x58},
{0x3804, 0x14},
{0x3805, 0x5f},
{0x3806, 0x0d},
{0x3807, 0xe7},
{0x3808, 0x07},
{0x3809, 0x80},
{0x380a, 0x04},
{0x380b, 0x38},
{0x380c, 0x01},
{0x380d, 0x4a},
{0x380e, 0x08},
{0x380f, 0xe0},
{0x3810, 0x00},
{0x3811, 0x09},
{0x3812, 0x00},
{0x3813, 0x08},
{0x3814, 0x22},
{0x3815, 0x22},
{0x3816, 0x00},
{0x3817, 0x00},
{0x3818, 0x00},
{0x3819, 0x00},
{0x381a, 0x00},
{0x381b, 0x01},
{0x381c, 0x00},
{0x381d, 0x03},
{0x381e, 0x00},
{0x381f, 0x00},
{0x3820, 0x01},
{0x3821, 0x0d},
{0x3822, 0x00},
{0x3823, 0x04},
{0x4012, 0x0d},
{0x4015, 0x02},
{0x4016, 0x0d},
{0x4018, 0x03},
{0x401e, 0x00},
{0x401f, 0xc4},
{0x4837, 0x08},
{0x5000, 0x89},
{0x5001, 0x02},
{0x5002, 0x01},
{0x5005, 0x08},
{0x5014, 0x30},
{0x5035, 0x08},
{0x5037, 0x08},
{0x5038, 0x0c},
{0x5039, 0xc0},
{0x503a, 0x09},
{0x503b, 0x90},
{0x5185, 0x0b},
{0x5207, 0xff},
{0x5208, 0xc1},
{0x5380, 0x0c},
{0x5381, 0x06},
{0x5386, 0x14},
{0x5387, 0x60},
{0x5388, 0x0f},
{0x5389, 0xc8},

};

static struct sensor_res_tab_info s_ov32a1q_resolution_tab_raw[VENDOR_NUM] = {
    {.module_id = MODULE_SUNNY,
     .reg_tab =
         {{ADDR_AND_LEN_OF_ARRAY(ov32a1q_init_setting), PNULL, 0, .width = 0,
           .height = 0, .xclk_to_sensor = EX_MCLK,
           .image_format = SENSOR_IMAGE_FORMAT_RAW},

 /*         {ADDR_AND_LEN_OF_ARRAY(ov32a1q_video_setting), PNULL, 0,
           .width = VIDEO_WIDTH, .height = VIDEO_HEIGHT,
           .xclk_to_sensor = EX_MCLK, .image_format = SENSOR_IMAGE_FORMAT_RAW},*/

          {ADDR_AND_LEN_OF_ARRAY(ov32a1q_preview_setting), PNULL, 0,
           .width = PREVIEW_WIDTH, .height = PREVIEW_HEIGHT,
           .xclk_to_sensor = EX_MCLK, .image_format = SENSOR_IMAGE_FORMAT_RAW},

 /*         {ADDR_AND_LEN_OF_ARRAY(ov32a1q_snapshot_setting), PNULL, 0,
           .width = SNAPSHOT_WIDTH, .height = SNAPSHOT_HEIGHT,
           .xclk_to_sensor = EX_MCLK, .image_format = SENSOR_IMAGE_FORMAT_RAW}*/}}

    /*If there are multiple modules,please add here*/
};

static SENSOR_TRIM_T s_ov32a1q_resolution_trim_tab[VENDOR_NUM] = {
    {.module_id = MODULE_SUNNY,
     .trim_info =
         {
             {0, 0, 0, 0, 0, 0, 0, {0, 0, 0, 0}},

/*             {.trim_start_x = VIDEO_TRIM_X,
              .trim_start_y = VIDEO_TRIM_Y,
              .trim_width = VIDEO_TRIM_W,
              .trim_height = VIDEO_TRIM_H,
              .line_time = VIDEO_LINE_TIME,
              .bps_per_lane = VIDEO_MIPI_PER_LANE_BPS,
              .frame_line = VIDEO_FRAME_LENGTH,
              .scaler_trim = {.x = VIDEO_TRIM_X,
                              .y = VIDEO_TRIM_Y,
                              .w = VIDEO_TRIM_W,
                              .h = VIDEO_TRIM_H}},*/

             {.trim_start_x = PREVIEW_TRIM_X,
              .trim_start_y = PREVIEW_TRIM_Y,
              .trim_width = PREVIEW_TRIM_W,
              .trim_height = PREVIEW_TRIM_H,
              .line_time = PREVIEW_LINE_TIME,
              .bps_per_lane = PREVIEW_MIPI_PER_LANE_BPS,
              .frame_line = PREVIEW_FRAME_LENGTH,
              .scaler_trim = {.x = PREVIEW_TRIM_X,
                              .y = PREVIEW_TRIM_Y,
                              .w = PREVIEW_TRIM_W,
                              .h = PREVIEW_TRIM_H}},

 /*            {.trim_start_x = SNAPSHOT_TRIM_X,
              .trim_start_y = SNAPSHOT_TRIM_Y,
              .trim_width = SNAPSHOT_TRIM_W,
              .trim_height = SNAPSHOT_TRIM_H,
              .line_time = SNAPSHOT_LINE_TIME,
              .bps_per_lane = SNAPSHOT_MIPI_PER_LANE_BPS,
              .frame_line = SNAPSHOT_FRAME_LENGTH,
              .scaler_trim = {.x = SNAPSHOT_TRIM_X,
                              .y = SNAPSHOT_TRIM_Y,
                              .w = SNAPSHOT_TRIM_W,
                              .h = SNAPSHOT_TRIM_H}},*/
         }}

    /*If there are multiple modules,please add here*/

};

static SENSOR_REG_T ov32a1q_shutter_reg[] = {
    {0x3501, 0x3e}, {0x3502, 0x60},
};

static struct sensor_i2c_reg_tab ov32a1q_shutter_tab = {
    .settings = ov32a1q_shutter_reg, .size = ARRAY_SIZE(ov32a1q_shutter_reg),
};

static SENSOR_REG_T ov32a1q_again_reg[] = {
    {0x3208, 0x00}, {0x3508, 0x04},
    {0x3509, 0x00}, {0x3208, 0x10}, {0x3208, 0xa0},
};

static struct sensor_i2c_reg_tab ov32a1q_again_tab = {
    .settings = ov32a1q_again_reg, .size = ARRAY_SIZE(ov32a1q_again_reg),
};

static SENSOR_REG_T ov32a1q_dgain_reg[] = {

};

static struct sensor_i2c_reg_tab ov32a1q_dgain_tab = {
    .settings = ov32a1q_dgain_reg, .size = ARRAY_SIZE(ov32a1q_dgain_reg),
};

static SENSOR_REG_T ov32a1q_frame_length_reg[] = {
    {0x380e, 0x0e}, {0x380f, 0xe0},
};

static struct sensor_i2c_reg_tab ov32a1q_frame_length_tab = {
    .settings = ov32a1q_frame_length_reg,
    .size = ARRAY_SIZE(ov32a1q_frame_length_reg),
};

static struct sensor_aec_i2c_tag ov32a1q_aec_info = {
    .slave_addr = (I2C_SLAVE_ADDR >> 1),
    .addr_bits_type = SENSOR_I2C_REG_16BIT,
    .data_bits_type = SENSOR_I2C_VAL_16BIT,
    .shutter = &ov32a1q_shutter_tab,
    .again = &ov32a1q_again_tab,
    .dgain = &ov32a1q_dgain_tab,
    .frame_length = &ov32a1q_frame_length_tab,
};

static const cmr_u16 ov32a1q_pd_is_right[] = {
    0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
    0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
};

static const cmr_u16 ov32a1q_pd_row[] = {
    7,  7,  23, 23, 43, 43, 59, 59, 11, 11, 27, 27, 39, 39, 55, 55,
    11, 11, 27, 27, 39, 39, 55, 55, 7,  7,  23, 23, 43, 43, 59, 59};

static const cmr_u16 ov32a1q_pd_col[] = {
    0,  4,  4,  8,  4,  8,  0,  4,  20, 16, 24, 20, 24, 20, 20, 16,
    36, 40, 32, 36, 32, 36, 36, 40, 56, 52, 52, 48, 52, 48, 56, 52};

static SENSOR_STATIC_INFO_T s_ov32a1q_static_info[VENDOR_NUM] = {
    {.module_id = MODULE_SUNNY,
     .static_info = {.f_num = 180,
                     .focal_length = 384,
                     .max_fps = 30,
                     .max_adgain = 15,
                     .ois_supported = 0,
#if 0//def CONFIG_CAMERA_PDAF_TYPE
                     .pdaf_supported = CONFIG_CAMERA_PDAF_TYPE,
#else
                     .pdaf_supported = 0,
#endif
                     .exp_valid_frame_num = 1,
                     .clamp_level = 64,
                     .adgain_valid_frame_num = 1,
                     .fov_info = {{5.223, 3.917}, 4.222f}}}
    /*If there are multiple modules,please add here*/
};

static SENSOR_MODE_FPS_INFO_T s_ov32a1q_mode_fps_info[VENDOR_NUM] = {
    {.module_id = MODULE_SUNNY,
     {.is_init = 0,
      {{SENSOR_MODE_COMMON_INIT, 0, 1, 0, 0},
       {SENSOR_MODE_PREVIEW_ONE, 0, 1, 0, 0},
       {SENSOR_MODE_SNAPSHOT_ONE_FIRST, 0, 1, 0, 0},
       {SENSOR_MODE_SNAPSHOT_ONE_SECOND, 0, 1, 0, 0},
       {SENSOR_MODE_SNAPSHOT_ONE_THIRD, 0, 1, 0, 0},
       {SENSOR_MODE_PREVIEW_TWO, 0, 1, 0, 0},
       {SENSOR_MODE_SNAPSHOT_TWO_FIRST, 0, 1, 0, 0},
       {SENSOR_MODE_SNAPSHOT_TWO_SECOND, 0, 1, 0, 0},
       {SENSOR_MODE_SNAPSHOT_TWO_THIRD, 0, 1, 0, 0}}}}
    /*If there are multiple modules,please add here*/
};

static struct sensor_module_info s_ov32a1q_module_info_tab[VENDOR_NUM] = {
    {.module_id = MODULE_SUNNY,
     .module_info = {.major_i2c_addr = 0x20 >> 1,
                     .minor_i2c_addr = 0x6c >> 1,

                     .reg_addr_value_bits = SENSOR_I2C_REG_16BIT |
                                            SENSOR_I2C_VAL_8BIT |
                                            SENSOR_I2C_FREQ_400,

                     .avdd_val = SENSOR_AVDD_2800MV,
                     .iovdd_val = SENSOR_AVDD_1800MV,
                     .dvdd_val = SENSOR_AVDD_1200MV,
#ifdef IMAGE_V_MIRROR
                     .image_pattern = SENSOR_IMAGE_PATTERN_RAWRGB_R,
#else
                     .image_pattern = SENSOR_IMAGE_PATTERN_RAWRGB_B,
#endif
                     .preview_skip_num = 1,
                     .capture_skip_num = 1,
                     .flash_capture_skip_num = 6,
                     .mipi_cap_skip_num = 0,
                     .preview_deci_num = 0,
                     .video_preview_deci_num = 0,

                     .threshold_eb = 0,
                     .threshold_mode = 0,
                     .threshold_start = 0,
                     .threshold_end = 0,

                     .sensor_interface =
                         {
                             .type = SENSOR_INTERFACE_TYPE_CSI2,
                             .bus_width = LANE_NUM,
                             .pixel_width = RAW_BITS,
                             .is_loose = 0,
                      //       .is_cphy = 1,
                         },
                     .change_setting_skip_num = 1,
                     .horizontal_view_angle = 65,
                     .vertical_view_angle = 60}}

    /*If there are multiple modules,please add here*/
};

static struct sensor_ic_ops s_ov32a1q_ops_tab;
struct sensor_raw_info *s_ov32a1q_mipi_raw_info_ptr = &s_ov32a1q_mipi_raw_info;

/*==============================================================================
 * Description:
 * sensor all info
 * please modify this variable acording your spec
 *============================================================================*/
SENSOR_INFO_T g_ov32a1q_mipi_raw_info = {
    .hw_signal_polarity = SENSOR_HW_SIGNAL_PCLK_P | SENSOR_HW_SIGNAL_VSYNC_P |
                          SENSOR_HW_SIGNAL_HSYNC_P,
    .environment_mode = SENSOR_ENVIROMENT_NORMAL | SENSOR_ENVIROMENT_NIGHT,
    .image_effect = SENSOR_IMAGE_EFFECT_NORMAL |
                    SENSOR_IMAGE_EFFECT_BLACKWHITE | SENSOR_IMAGE_EFFECT_RED |
                    SENSOR_IMAGE_EFFECT_GREEN | SENSOR_IMAGE_EFFECT_BLUE |
                    SENSOR_IMAGE_EFFECT_YELLOW | SENSOR_IMAGE_EFFECT_NEGATIVE |
                    SENSOR_IMAGE_EFFECT_CANVAS,

    .wb_mode = 0,
    .step_count = 7,
    .reset_pulse_level = SENSOR_LOW_PULSE_RESET,
    .reset_pulse_width = 50,
    .power_down_level = SENSOR_LOW_LEVEL_PWDN,
    .identify_count = 1,
    .identify_code = {{.reg_addr = ov32a1q_PID_ADDR,
                       .reg_value = ov32a1q_PID_VALUE},
                      {.reg_addr = ov32a1q_VER_ADDR,
                       .reg_value = ov32a1q_VER_VALUE}},

    .source_width_max = SNAPSHOT_WIDTH,
    .source_height_max = SNAPSHOT_HEIGHT,
    .name = (cmr_s8 *)SENSOR_NAME,
    .image_format = SENSOR_IMAGE_FORMAT_RAW,

    .module_info_tab = s_ov32a1q_module_info_tab,
    .module_info_tab_size = ARRAY_SIZE(s_ov32a1q_module_info_tab),

    .resolution_tab_info_ptr = s_ov32a1q_resolution_tab_raw,
    .sns_ops = &s_ov32a1q_ops_tab,
    .raw_info_ptr = &s_ov32a1q_mipi_raw_info_ptr,

    .video_tab_info_ptr = NULL,
    .sensor_version_info = (cmr_s8 *)"ov32a1q_v1",
};

#endif

